'use client';
import { useEffect, useState, useRef } from 'react';
import { YMaps, Map, Placemark } from '@pbe/react-yandex-maps';
import styles from './YandexMap.module.css';

const DebugYandexMap = () => {
  const [mapCenter, setMapCenter] = useState([43.585472, 39.723098]);
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [userLocation, setUserLocation] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [debugInfo, setDebugInfo] = useState('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
  const [showGeolocation, setShowGeolocation] = useState(true);

  useEffect(() => {
    setDebugInfo('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, showGeolocation: ' + showGeolocation);
  }, [showGeolocation]);

  const handleMapClick = (event) => {
    const coords = event.get('coords');
    console.log('–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', coords);
    setSelectedLocation(coords);
    // –ù–µ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ—á–∫—É
    // setMapCenter(coords);
    setDebugInfo(`–ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ: ${coords.join(', ')}`);
  };

  const handleGeolocationClick = () => {
    setDebugInfo('–ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
    if (navigator.geolocation) {
      setIsLoading(true);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          const userCoords = [latitude, longitude];
          setUserLocation(userCoords);
          setMapCenter(userCoords);
          setSelectedLocation(userCoords);
          setIsLoading(false);
          setDebugInfo(`–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: ${userCoords.join(', ')}`);
        },
        (error) => {
          console.log('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
          setError('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ' + error.message);
          setIsLoading(false);
          setDebugInfo('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ' + error.message);
        }
      );
    } else {
      setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      setDebugInfo('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    }
  };

  return (
    <div style={{ width: '100%', height: '500px', border: '1px solid #ddd', borderRadius: '8px' }}>
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div style={{ 
        padding: '10px', 
        background: '#f0f8ff', 
        borderBottom: '1px solid #ddd',
        fontSize: '12px',
        fontFamily: 'monospace'
      }}>
        <div><strong>Debug Info:</strong> {debugInfo}</div>
        <div><strong>showGeolocation:</strong> {showGeolocation ? 'true' : 'false'}</div>
        <div><strong>userLocation:</strong> {userLocation ? userLocation.join(', ') : 'null'}</div>
        <div><strong>selectedLocation:</strong> {selectedLocation ? selectedLocation.join(', ') : 'null'}</div>
        <div><strong>isLoading:</strong> {isLoading ? 'true' : 'false'}</div>
        <div><strong>error:</strong> {error || 'null'}</div>
      </div>

      {/* –ö–∞—Ä—Ç–∞ */}
      <div style={{ height: '350px' }}>
        <YMaps 
          query={{
            apikey: 'aa9feae8-022d-44d2-acb1-8cc0198f451d',
            lang: 'ru_RU',
            load: 'package.full'
          }}
        >
          <Map
            state={{
              center: mapCenter,
              zoom: 12
            }}
            width="100%"
            height="100%"
            onClick={handleMapClick}
          >
            {/* –ú–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            {userLocation && (
              <Placemark
                geometry={userLocation}
                options={{
                  preset: 'islands#blueCircleDotIcon',
                  iconColor: '#3caa3c'
                }}
                properties={{
                  balloonContent: '–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
                }}
              />
            )}
            
            {/* –ú–∞—Ä–∫–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ */}
            {selectedLocation && (
              <Placemark
                geometry={selectedLocation}
                options={{
                  preset: 'islands#redDotIcon',
                  iconColor: '#ff0000'
                }}
                properties={{
                  balloonContent: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'
                }}
              />
            )}
          </Map>
        </YMaps>
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∞ */}
      <div className={styles.mapInstructions}>
        <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏</p>
        {showGeolocation && (
          <button 
            type="button"
            onClick={(e) => {
              e.preventDefault();
              e.stopPropagation();
              handleGeolocationClick();
            }}
            className={styles.geolocationButton}
            disabled={isLoading}
          >
            {isLoading ? '‚è≥ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...' : 'üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'}
          </button>
        )}
      </div>
    </div>
  );
};

export default DebugYandexMap;
